# -*- mode:org; fill-column:79; -*-

#+title:Introduction to NodeJS
#+subtitle:Microsoft DEV283x
#+subtitle: {{{version}}} {{{date}}}
#+date:2019-06-10 14:19
#+macro:version Version 0.0.2

{{{version}}} {{{date}}}

* Introduction
:PROPERTIES:
:unnumbered: t
:END:

** Welcome from the Instructor
Welcome to "Introduction to Node.js on edX".  In this course, you will not only
learn the foundation of Node.js, but you will also build practical skills which
you can use in your day-to-day job.  You will be able to harness the power of
Express and MongoDB and be ready to build your own web applications using
Node.js.  You will impress your friends, co-workers and your boss with these
newly acquired skills.

#+cindex:Mardan, Azat
#+cindex:instructor introduction
But before we start, let me introduce myself first.  My name is Azat Mardan.
I'm the founder of Node University and author of Practical Node.js as well as
other 14 books on Node and JavaScript.  I've been using Node since it's earlier
years and have been teaching it at conferences, workshops and webinars for the
past five years.

I work as a Technology Fellow at Capital One (top 10 US bank and a Fortune 500
company) where I help to bring innovation and best software engineering
practices.  In my spare time, I write about Node and JavaScript on my blog
Webapplog.com and Node.University.

** Couse Overview
This course will cover the Node core modules, 
- Express
- MongoDB
- Mongoose. 


Here is a detailed overview of the course:

*** Module 0---Introduction
- 1. Welcome to Introduction to Node.js
- 2. Course Overview
- 3. Why Node.js
- 4. Node in Modern Web Development
- 5. Module 0 Assignment Lab: Introductions
- 6. Pre-course Survey

*** Module 1---Node Core
- 1. Node Core Overview
- 2. Installation and Recommended Tool Chain
- 3. Launching Node, Globals and Process
- 4. Node Modules with require and modules.exports
- 5. Core modules
- 6. Understanding event emitters
- 7. HTTP client with core http
- 8. HTTP server with core http
- 9. Npm basics
- 10. Summary of Module 1: Node Core
- 11. Module 1 Tutorial Lab: Node Web Crawler
- 12. Module 1 Assignment Lab: CSV to JSON Converter
- 13. Module 1 Assessment

*** Module 2---Express Framework
- 1. Express Overview
- 2. Why Express and Express Installations
- 3. Hello World with Express
- 4. Creating and Using Middleware
- 5. Implementing REST API Routing
- 6. URL Parameters, Query Strings and Input Validation
- 7. Summary of Module 2: Express Framework
- 8. Module 2 Tutorial Lab 1: REST API with Express 
- 9. Module 2 Assignment Lab: RESTful Blog API
- 10. Module 2 Assessment

*** Module 3---Persistence with MongoDB
- 1. MongoDB Overview
- 2. MongoDB Basics
- 3. MongoDB Native Driver
- 4. MongoDB GUI Client MongoUI
- 5. Summary of Module 3: Persistence with MongoDB
- 6. Module 3 Tutorial Lab: CRUD REST API with Node, Express and MongoDB
- 7. Module 3 Assignment Lab: MongoDB Migration Node script
- 8. Module 3 Assessment

*** Module 4---Working with Mongoose ODM
- 1. Mongoose Overview
- 2. Working with Mongoose and its Schemas
- 3. Working with Mongoose Models
- 4. Creating Mongoose Hooks and Methods
- 5. Advanced Mongoose Features
- 6. Summary of Module 4: Working with Mongoose ODM
- 7. Module 4 Tutorial Lab: Relational queries with Mongoose
- 8. Module 4 Assignment Lab: REST API with Mongoose
- 9. Module 4 Assessment

*** Module 5---Final Assessment
- 1. Final Assessment
- 2. Post-Course Survey
- 3. Course Summary

** Why NodeJS
Let's start by taking a look at why Node.js is one of the fastest growing web
platforms out there.  Node.js provides you with the following benefits:

- Develop faster due to the vast number of modules and reusable code from npm
- Make fewer mistakes and be more productive (One language across the stack)
- Delight your user with fast response time (YMMV)
- Reduce team size and communication overhead (full stack JavaScript)
- Reduce dependency on other teams (e.g., backend API teams)
- Ability to re-use code on the browser and server

** NodeJS Features
Node.js has some distinct features. Here are some examples of those features:

- Non-blocking I/O: performant
- Fast JS engine: browser arms race (Google Chrome V8 and Microsoft Chakra)
- Expressive and interpreted language: don't waste time on setup
- Solid and improving language standard (ECMAScript)
- Built in package manager with a humongous number of packages (npm)

** Node Downsides
Node isn't always the best design choice.  Like most things in life, Node.js
has some downsides.  Node might not be a good fit because of the following
reasons:

- Memory leaks in long running processes with Node are worse than in short
  running browser environments such as browser JavaScript
- The event loop makes asynchronous error handling more difficult than
  synchronous error handling
- No benefit for CPU-bound tasks
- Need to think about scalability early on to develop stateless scalable
  distributed systems
- No built-in typing (but possible with TypeScript)


*Note*: The /Event loop/ is the core of Node.js and it's a genius idea.
However, don't use Node.js for blocking, CPU-intensive tasks.  Node.js will not
give you a performance boost for stuff like that.  Node.js is best suited for
I/O stuff (like web servers).

** Node in Modern Web Development
Modern web development consists of building front-end applications which
connect to servers to submit or get data.  The front-end applications use the
single-page application approach a.k.a. thick client.  In it, a client app
communicates with a server backend via JSON, GraphQL, Protocol Buffers, XML,
text, binary streams or other formats which are transmitted via HTTP.

The server communicates with databases and other services.  In other words, the
server acts as a middleman between the front-end application and the database
or other services.  The server does things which the front-end app cannot do:
authentication, data validation, working with a file system, encryption, etc.

The way the server communicates with the front-end app client and vice versa is
by having various endpoints distinguished by URLs in accordance to the HTTP
standard.  Each request for data has URL, headers, and body (a.k.a. payload).

Implementation of servers is where Node comes in.  Node is used to implement
the backend servers which are often JSON RESTful APIs (but they could be of
other formats as well).  Node is on par with stacks such as Apache web
server+PHP or Tomcat+Java.

Node is not a framework by itself because it offers very low level mechanisms.
The Express framework is often used to implement web applications and RESTful
API servers in Node.

Adhering to SPA and REST API architectures for your web applications will give
you the flexibility to leverage your servers for other clients (mobile, IoT,
public) and will allow you to change front-end clients easily because of the
loose coupling provided by the API.

* Concept Index
:PROPERTIES:
:index:    cp
:unnumbered: t
:END:

* Texinfo Export Settings                                          :noexport:
#+texinfo_filename:IntroNodeJS.info
#+texinfo_class: info
#+texinfo_header:
#+texinfo_post_header:
#+texinfo_dir_category:Programming
#+texinfo_dir_title:Introduction to NodeJS
#+texinfo_dir_desc:Presentation on edX
#+texinfo_printed_title:Introduction to NodeJS

* Macro Definitions                                                :noexport:
#+macro:heading @@texinfo:@heading @@$1
#+macro:subheading @@texinfo:@subheading @@$1

* Local Variables                                                  :noexport:
# Local variables:
# time-stamp-pattern:"8/^\\#\\+date:%:y-%02m-%02d %02H:%02M$"
# End:
