# -*- mode:org; fill-column:79; -*-

#+title:Introduction to NodeJS
#+subtitle:Microsoft DEV283x
#+subtitle: {{{version}}} {{{date}}}
#+date:2019-06-24 16:21
#+macro:version Version 0.0.3

{{{version}}} {{{date}}}

* Introduction
:PROPERTIES:
:unnumbered: t
:END:

** Welcome from the Instructor
Welcome to "Introduction to Node.js on edX".  In this course, you will not only
learn the foundation of Node.js, but you will also build practical skills which
you can use in your day-to-day job.  You will be able to harness the power of
Express and MongoDB and be ready to build your own web applications using
Node.js.  You will impress your friends, co-workers and your boss with these
newly acquired skills.

#+cindex:Mardan, Azat
#+cindex:instructor introduction
But before we start, let me introduce myself first.  My name is Azat Mardan.
I'm the founder of Node University and author of Practical Node.js as well as
other 14 books on Node and JavaScript.  I've been using Node since it's earlier
years and have been teaching it at conferences, workshops and webinars for the
past five years.

I work as a Technology Fellow at Capital One (top 10 US bank and a Fortune 500
company) where I help to bring innovation and best software engineering
practices.  In my spare time, I write about Node and JavaScript on my blog
Webapplog.com and Node.University.

** Couse Overview
This course will cover the Node core modules, 
- Express
- MongoDB
- Mongoose. 


Here is a detailed overview of the course:

*** Module 0---Introduction
- 1. Welcome to Introduction to Node.js
- 2. Course Overview
- 3. Why Node.js
- 4. Node in Modern Web Development
- 5. Module 0 Assignment Lab: Introductions
- 6. Pre-course Survey

*** Module 1---Node Core
- 1. Node Core Overview
- 2. Installation and Recommended Tool Chain
- 3. Launching Node, Globals and Process
- 4. Node Modules with ~require~ and ~modules.exports~
- 5. Core modules
- 6. Understanding event emitters
- 7. HTTP client with core http
- 8. HTTP server with core http
- 9. Npm basics
- 10. Summary of Module 1: Node Core
- 11. Module 1 Tutorial Lab: Node Web Crawler
- 12. Module 1 Assignment Lab: CSV to JSON Converter
- 13. Module 1 Assessment

*** Module 2---Express Framework
- 1. Express Overview
- 2. Why Express and Express Installations
- 3. Hello World with Express
- 4. Creating and Using Middleware
- 5. Implementing REST API Routing
- 6. URL Parameters, Query Strings and Input Validation
- 7. Summary of Module 2: Express Framework
- 8. Module 2 Tutorial Lab 1: REST API with Express 
- 9. Module 2 Assignment Lab: RESTful Blog API
- 10. Module 2 Assessment

*** Module 3---Persistence with MongoDB
- 1. MongoDB Overview
- 2. MongoDB Basics
- 3. MongoDB Native Driver
- 4. MongoDB GUI Client MongoUI
- 5. Summary of Module 3: Persistence with MongoDB
- 6. Module 3 Tutorial Lab: CRUD REST API with Node, Express and MongoDB
- 7. Module 3 Assignment Lab: MongoDB Migration Node script
- 8. Module 3 Assessment

*** Module 4---Working with Mongoose ODM
- 1. Mongoose Overview
- 2. Working with Mongoose and its Schemas
- 3. Working with Mongoose Models
- 4. Creating Mongoose Hooks and Methods
- 5. Advanced Mongoose Features
- 6. Summary of Module 4: Working with Mongoose ODM
- 7. Module 4 Tutorial Lab: Relational queries with Mongoose
- 8. Module 4 Assignment Lab: REST API with Mongoose
- 9. Module 4 Assessment

*** Module 5---Final Assessment
- 1. Final Assessment
- 2. Post-Course Survey
- 3. Course Summary

** Why NodeJS
Let's start by taking a look at why Node.js is one of the fastest growing web
platforms out there.  Node.js provides you with the following benefits:

- Develop faster due to the vast number of modules and reusable code from npm
- Make fewer mistakes and be more productive (One language across the stack)
- Delight your user with fast response time (YMMV)
- Reduce team size and communication overhead (full stack JavaScript)
- Reduce dependency on other teams (e.g., backend API teams)
- Ability to re-use code on the browser and server

** NodeJS Features
Node.js has some distinct features. Here are some examples of those features:

- Non-blocking I/O: performant
- Fast JS engine: browser arms race (Google Chrome V8 and Microsoft Chakra)
- Expressive and interpreted language: don't waste time on setup
- Solid and improving language standard (ECMAScript)
- Built in package manager with a humongous number of packages (npm)

** Node Downsides
Node isn't always the best design choice.  Like most things in life, Node.js
has some downsides.  Node might not be a good fit because of the following
reasons:

- Memory leaks in long running processes with Node are worse than in short
  running browser environments such as browser JavaScript
- The event loop makes asynchronous error handling more difficult than
  synchronous error handling
- No benefit for CPU-bound tasks
- Need to think about scalability early on to develop stateless scalable
  distributed systems
- No built-in typing (but possible with TypeScript)


*Note*: The /Event loop/ is the core of Node.js and it's a genius idea.
However, don't use Node.js for blocking, CPU-intensive tasks.  Node.js will not
give you a performance boost for stuff like that.  Node.js is best suited for
I/O stuff (like web servers).

** Node in Modern Web Development
Modern web development consists of building front-end applications which
connect to servers to submit or get data.  The front-end applications use the
single-page application approach a.k.a. thick client.  In it, a client app
communicates with a server backend via JSON, GraphQL, Protocol Buffers, XML,
text, binary streams or other formats which are transmitted via HTTP.

The server communicates with databases and other services.  In other words, the
server acts as a middleman between the front-end application and the database
or other services.  The server does things which the front-end app cannot do:
authentication, data validation, working with a file system, encryption, etc.

The way the server communicates with the front-end app client and vice versa is
by having various endpoints distinguished by URLs in accordance to the HTTP
standard.  Each request for data has URL, headers, and body (a.k.a. payload).

Implementation of servers is where Node comes in.  Node is used to implement
the backend servers which are often JSON RESTful APIs (but they could be of
other formats as well).  Node is on par with stacks such as Apache web
server+PHP or Tomcat+Java.

Node is not a framework by itself because it offers very low level mechanisms.
The Express framework is often used to implement web applications and RESTful
API servers in Node.

Adhering to SPA and REST API architectures for your web applications will give
you the flexibility to leverage your servers for other clients (mobile, IoT,
public) and will allow you to change front-end clients easily because of the
loose coupling provided by the API.

* Module 1---Node Core
** Node Core Overview
This module will build a solid foundation of Node development by teaching the
following topics:

- Installation and Recommended Tool Chain
  1. [[*Installation and Recommended Tool Chain][Installation and recommended tool chain]]

  2. [[*Before We Start][Before we start]]

- Launching Node, Global and Process
  1. [[*Launching Node---Node.js Console REPL][Node REPL]]

  2. Launching Node code

  3. Node Globals

  4. Node Process Information

- Node Modules with ~require~ and ~module.exports~
  1. Node Modules with ~require~ and ~module.exports~

  2. ~require~ Usage Patterns

  3. ~require~ Caching Mechanism

  4. Node Module Export Patterns

- Core Modules
  1. Core Modules

  2. ~fs~ Module

  3. ~path~ Module

- Understanding Event Emitters
  1. Understanding Node Event Emitters

  2. Modular Events

- HTTP Client with Core http
  1. Implementing an HTTP client with core http module

  2. Implementing an HTTP client with JSON parsing

  3. Implementing an HTTP client with POST requests

- HTTP Server with Core http
  1. Implementing an HTTP server

  2. Understanding server request

  3. Understanding server response

- ~npm~ Basics
  1. Working with ~npm~ and ~npm~ basics

  2. Understanding ~package.json~

  3. Configuring ~npm~
** Installation and Recommended Tool Chain
#+cindex:installation
#+cindex:tool chain
#+cindex:npm
In this lesson, we will go over the set up for Node, npm and all the tools you
will need to be productive.
*** Node and ~npm~ Installation
#+cindex:installer
#+cindex:node, installation
#+cindex:installation, Node
#+cindex:npm, install with Node
#+cindex:installation, npm
Go to https://nodejs.org/en/download and download a one-click installer for
your OS by clicking on the Install button.

When choosing a Node installer, donâ€™t choose binaries or source code unless you
know what to do with them or your OS is not present there (i.e., not Windows or
Mac).

{{{heading(npm)}}}

The installers come with ~npm~ (Node package manager)---an important tool for
managing dependencies.  Because ~npm~ comes with Node, there's no need to
install ~npm~ separately.

*** MongoDB Installation
#+cindex:MongoDB, installation
To install MongoDB go to https://www.mongodb.com/download-center and choose
your version according to the OS.  macOS users who have Homebrew, can install
MongoBD using Homebrew by following the instructions at
http://docs.mongodb.org/master/tutorial/install-mongodb-on-os-x.

{{{heading(Data Path)}}}

#+cindex:MongoDB, configuration
#+cindex:configuration, MongoDB
Before you run the MongoDB server for the first time, you'll need to configure
the folder in which MongoDB stores data.  By default it's ~/data/db~.  To
create this folder, execute this Terminal / CLI command:

: mkdir -p /data/db

Set permission/ownership with chown:

: sudo chown mongodb:mongodb

The command to start the MongoDB server is ~mongod~.

Alternatively, you can specify a different folder with:

: mongod --dbpath <path to data directory>
*** Configuring NPM
#+cindex:npm, configuration
#+cindex:configuration, npm
You will need to do this if you get a permission error when you try to install
~npm~ modules.  If you don't have permission errors, then skip this
configuration.  You can come back to it and configure later.

Locate the path to ~npm~'s directory.  It might differ depending on the
OS.  Execute the command below to find your path:

#+cindex:npm prefix
: npm config get prefix

For many POSIX systems, this will be ~/usr/local~.

*DANGER*: If the path is just ~/usr~, change the default folder to a new one as
described in the ~npm~ documentation.

Change the owner of ~npm~'s directories to the name of the current user (your
username!):

: sudo chown -R $(whoami) $(npm config get prefix)/{lib/node_modules,bin,share}

This changes the permissions of the sub-folders used by ~npm~ and some other
tools (~lib/node_modules~, ~bin~, and ~share~).
*** Before We Start
#+cindex:node version
Let's check that you have everything ready to get up and running with the
exercises and code presented in this course.  Open your Terminal app or Command
Prompt and type the following commands to check for the presence and versions
of the required platforms, tools and libraries.

{{{heading(Node version check)}}}

Node must be v8 or higher.  Check it by running:

#+name:node-version-check
#+begin_src sh :results output :exports results
node --version
#+end_src

#+RESULTS: node-version-check
: v12.4.0

{{{heading(Execute Node statement)}}}

#+cindex:node, execute
You should be able to execute Node. You can use ~-e~ to quickly run Node code,
for example:

#+name:node-execute-check
#+begin_src sh :results output :exports results
node -e 'console.log(`My node version is ${process.versions.node}`)'
#+end_src

#+RESULTS: node-execute-check
: My node version is 12.4.0

{{{heading(npm version check)}}}

#+cindex:npm version
~npm~ must be v5 or higher.  Check it by running:

#+name:npm-version-check
#+begin_src sh :results output :exports results
npm --version
yarn --version
#+end_src

#+RESULTS: npm-version-check
: 6.9.0
: 1.17.0

{{{heading(npm installation check)}}}

#+cindex:npm global installation
#+cindex:yarn global intallation
Let's test ~npm~ installation.  Go ahead and globally install ~node-static~
which is a useful local development web server:

#+name:npm-global-installation-check
#+begin_src sh :results output :exports results
yarn global add node-static
#+end_src

#+RESULTS: npm-global-installation-check
: yarn global v1.17.0
: [1/4] Resolving packages...
: [2/4] Fetching packages...
: [3/4] Linking dependencies...
: [4/4] Building fresh packages...
: success Installed "node-static@0.7.11" with binaries:
:       - static
: Done in 8.20s.

You should not see any errors or need sudo if you followed instructions on how
to change ownership of npm in the previous unit.  If you see permission errors,
then please go back to configuring ~npm~ and change the ownership of ~npm~'s
folder.

{{{heading(node-static version check)}}}

When ~node-static~ is done installing, then you should be able to check
~static~ (command for node-static) with (I'm using 0.7.9):

#+name:node-static-version-check
#+begin_src sh :results output :exports results
static --version
#+end_src

#+RESULTS: node-static-version-check
: node-static 0.7.9

{{{heading(MongoDB version check)}}}

MongoDB must be v3 or higher:

#+name:mongodb-version-check
#+begin_src sh :results output :exports results
mongod --version
#+end_src

#+RESULTS: mongodb-version-check
: db version v4.0.10
: git version: c389e7f69f637f7a1ac3cc9fae843b635f20b766
: allocator: system
: modules: none
: build environment:
:     distarch: x86_64
:     target_arch: x86_64
** Launching Node---Global---Process
*** Launching Node---Node.js Console REPL
#+cindex:REPL
#+cindex:Node.js console
Like most platforms/languages (e.g., Java, Python, Ruby, and PHP), Node.js
comes with a virtual environment called Read-Evaluate-Print Loop (REPL).  Using
REPL (a.k.a. Node console), we can execute pretty much any Node.js/JavaScript
code.  It is even possible to include modules and work with the file system!

To start Node REPL, run the following command in your terminal:

: $ node

The prompt should change from =$= to =>= (or something else, depending on your
shell).  From this prompt, we can run any JavaScript/Node.js (akin to the Chrome
Developer Tools console) we want.  For example:

#+begin_example
> 1+1
> "Hello"+" "+"World"
> a=1;b=2;a+b
> 17+29/2*7
> f = function(x) {return x*2}
> f(b)
#+end_example

REPL prints the results of the expressions such as ~1+1~ or ~f(b)~:

REPL is one of the ways how developers can run Node code.  The benefit of REPL
is that you immediately see the results of a particular expression or piece of
code.  I often use REPL to validate Regular Expressions or string methods.  The
downside of REPL is that the code is not saved which means it's harder to
replicate the execution.  Thus, in the next lesson we'll learn how to launch
Node code from a saved file.
*** Launching Node---Node.js Scripts
Node is an interpreted language and environment, not a compiled one.  There are
three main way to launch Node code:

 1. REPL (already covered in the previous lesson)
 2. Eval option
 3. Launching Node code from a file

**** Eval Option
#+cindex:eval @option{-e}
If all we need is a quick set of statements, thereâ€™s a eval ~-e~ option that
allows us to run inline JavaScript/Node.js.  For example, to print the current
date, run this in your Terminal / Command Prompt:

#+begin_src sh :results output :exports results
node -e "console.log(new Date())"
#+end_src

#+RESULTS:
: 2019-06-24T23:20:25.181Z

**** Launching Node Code from a File

** Summary of Module 1: Node Core

** Module 1 Tutorial Lab: Node Web Crawler

** Module 1 Assignment Lab: CSV to JSON Converter

* Concept Index
:PROPERTIES:
:index:    cp
:unnumbered: t
:END:

* Texinfo Export Settings                                          :noexport:
#+texinfo_filename:IntroNodeJS.info
#+texinfo_class: info
#+texinfo_header:
#+texinfo_post_header:
#+texinfo_dir_category:Programming
#+texinfo_dir_title:Introduction to NodeJS
#+texinfo_dir_desc:Presentation on edX
#+texinfo_printed_title:Introduction to NodeJS

* Macro Definitions                                                :noexport:
#+macro:heading @@texinfo:@heading @@$1
#+macro:subheading @@texinfo:@subheading @@$1

* Local Variables                                                  :noexport:
# Local variables:
# time-stamp-pattern:"8/^\\#\\+date:%:y-%02m-%02d %02H:%02M$"
# End:
